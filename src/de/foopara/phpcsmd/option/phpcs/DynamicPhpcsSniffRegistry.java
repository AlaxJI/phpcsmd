package de.foopara.phpcsmd.option.phpcs;

public class DynamicPhpcsSniffRegistry extends GenericPhpcsSniffRegistry {

    public DynamicPhpcsSniffRegistry() {
        PhpcsKeys keys = null;
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.Classes.DuplicateClassName", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        keys.addKey("NotAllowedWarning");
        this.add(new PhpcsSniff("Generic.CodeAnalysis.EmptyStatement", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("CanSimplify");
        this.add(new PhpcsSniff("Generic.CodeAnalysis.ForLoopShouldBeWhileLoop", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        this.add(new PhpcsSniff("Generic.CodeAnalysis.ForLoopWithTestFunctionCall", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.CodeAnalysis.JumbledIncrementer", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.CodeAnalysis.UnconditionalIfStatement", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.CodeAnalysis.UnnecessaryFinalModifier", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.CodeAnalysis.UnusedFunctionParameter", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.CodeAnalysis.UselessOverridingMethod", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("TaskFound");
        this.add(new PhpcsSniff("Generic.Commenting.Fixme", "Highlight FIXME comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("TaskFound");
        this.add(new PhpcsSniff("Generic.Commenting.Todo", "Highlight TODO comments", "comment", keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        keys.addKey("Discouraged");
        this.add(new PhpcsSniff("Generic.ControlStructures.InlineControlStructure", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("ExternalToolError");
        keys.addKey("ExternalTool");
        this.add(new PhpcsSniff("Generic.Debug.ClosureLinter", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("ExternalTool");
        this.add(new PhpcsSniff("Generic.Debug.JSHint", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.Files.ByteOrderMark", null, null, keys));
        this.add(new PhpcsSniff("Generic.Files.EndFileNewline", null, null, null));
        keys = new PhpcsKeys();
        keys.addKey("InvalidEOLChar");
        this.add(new PhpcsSniff("Generic.Files.LineEndings", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("MaxExceeded");
        keys.addKey("TooLong");
        this.add(new PhpcsSniff("Generic.Files.LineLength", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("SameLine");
        this.add(new PhpcsSniff("Generic.Formatting.DisallowMultipleStatements", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotSame");
        keys.addKey("NotSame");
        this.add(new PhpcsSniff("Generic.Formatting.MultipleStatementAlignment", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("SpaceFound");
        this.add(new PhpcsSniff("Generic.Formatting.NoSpaceAfterCast", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NoSpace");
        keys.addKey("TooMuchSpace");
        this.add(new PhpcsSniff("Generic.Formatting.SpaceAfterCast", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        this.add(new PhpcsSniff("Generic.Functions.CallTimePassByReference", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("SpaceBeforeComma");
        keys.addKey("NoSpaceAfterComma");
        keys.addKey("TooMuchSpaceAfterComma");
        keys.addKey("NoSpaceBeforeEquals");
        keys.addKey("NoSpaceAfterEquals");
        this.add(new PhpcsSniff("Generic.Functions.FunctionCallArgumentSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("BraceOnSameLine");
        keys.addKey("BraceSpacing");
        keys.addKey("BraceIndent");
        this.add(new PhpcsSniff("Generic.Functions.OpeningFunctionBraceBsdAllman", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("BraceOnNewLine");
        keys.addKey("SpaceAfterBracket");
        keys.addKey("SpaceBeforeBrace");
        this.add(new PhpcsSniff("Generic.Functions.OpeningFunctionBraceKernighanRitchie", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("MaxExceeded");
        keys.addKey("TooHigh");
        this.add(new PhpcsSniff("Generic.Metrics.CyclomaticComplexity", "calculate cyclomatic complexity", "complex", keys));
        keys = new PhpcsKeys();
        keys.addKey("MaxExceeded");
        keys.addKey("TooHigh");
        this.add(new PhpcsSniff("Generic.Metrics.NestingLevel", "calculate nesting level", "complex", keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("MethodDoubleUnderscore");
        keys.addKey("ScopeNotCamelCaps");
        keys.addKey("NotCamelCaps");
        keys.addKey("FunctionDoubleUnderscore");
        keys.addKey("NotCamelCaps");
        this.add(new PhpcsSniff("Generic.NamingConventions.CamelCapsFunctionName", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("OldStyle");
        keys.addKey("OldStyleCall");
        this.add(new PhpcsSniff("Generic.NamingConventions.ConstructorName", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("ClassConstantNotUpperCase");
        keys.addKey("ConstantNotUpperCase");
        keys.addKey("ConstantNotUpperCase");
        this.add(new PhpcsSniff("Generic.NamingConventions.UpperCaseConstantName", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Deprecated");
        keys.addKey("Deprecated");
        this.add(new PhpcsSniff("Generic.PHP.DeprecatedFunctions", "show deprecated functions", "forbidden", keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        keys.addKey("EchoFound");
        this.add(new PhpcsSniff("Generic.PHP.DisallowShortOpenTag", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Discouraged");
        keys.addKey("Discouraged");
        this.add(new PhpcsSniff("Generic.PHP.ForbiddenFunctions", "show forbidden functions", "forbidden", keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.PHP.LowerCaseConstant", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Forbidden");
        keys.addKey("Discouraged");
        this.add(new PhpcsSniff("Generic.PHP.NoSilencedErrors", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.PHP.UpperCaseConstant", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Found");
        keys.addKey("Found");
        this.add(new PhpcsSniff("Generic.Strings.UnnecessaryStringConcat", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Unexpected");
        keys.addKey("Missing");
        keys.addKey("NoMatch");
        this.add(new PhpcsSniff("Generic.VersionControl.SubversionProperties", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("TabsUsed");
        this.add(new PhpcsSniff("Generic.WhiteSpace.DisallowTabIndent", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Incorrect");
        keys.addKey("Incorrect");
        this.add(new PhpcsSniff("Generic.WhiteSpace.ScopeIndent", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("ForbiddenStyle");
        this.add(new PhpcsSniff("MySource.CSS.BrowserSpecificStyles", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("WrongExceptionType");
        this.add(new PhpcsSniff("MySource.Channels.ChannelException", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("MySource.Channels.DisallowSelfActions", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotIncludedCall");
        keys.addKey("NotIncludedExtends");
        keys.addKey("NotIncludedCall");
        this.add(new PhpcsSniff("MySource.Channels.IncludeSystem", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("MySource.Channels.UnusedSystem", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("ApiNotFirst");
        keys.addKey("ApiSpacing");
        keys.addKey("ApiTagSpacing");
        keys.addKey("TagNotAllowed");
        keys.addKey("ApiNotLast");
        keys.addKey("ApiTagIndent");
        this.add(new PhpcsSniff("MySource.Commenting.FunctionComment", "analyse function comments", "comment", keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("MySource.Debug.DebugCode", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("ConflictFound");
        this.add(new PhpcsSniff("MySource.Debug.FirebugConsole", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("NotSelf");
        this.add(new PhpcsSniff("MySource.Objects.AssignThis", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("FirstArgNotCallback");
        keys.addKey("ReturnValue");
        keys.addKey("FirstArgNotSelf");
        keys.addKey("NoReturn");
        keys.addKey("CallbackNotCalled");
        this.add(new PhpcsSniff("MySource.Objects.CreateWidgetTypeCallback", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("MySource.Objects.DisallowNewWidget", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("MySource.PHP.EvalObjectFactory", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("SuperglobalAccessed");
        this.add(new PhpcsSniff("MySource.PHP.GetRequestData", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotAssigned");
        this.add(new PhpcsSniff("MySource.PHP.ReturnFunctionValue", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("ArrayNotAllowed");
        this.add(new PhpcsSniff("MySource.Strings.JoinStrings", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("MissingBrace");
        keys.addKey("OpenBraceNewLine");
        keys.addKey("OpenBraceWrongLine");
        keys.addKey("OpenBraceNotAlone");
        keys.addKey("SpaceBeforeBrace");
        this.add(new PhpcsSniff("PEAR.Classes.ClassDeclaration", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("WrongStyle");
        keys.addKey("Missing");
        keys.addKey("Missing");
        keys.addKey("Empty");
        keys.addKey("SpacingBeforeShort");
        keys.addKey("SpacingAfterShort");
        keys.addKey("SpacingBeforeTags");
        keys.addKey("EmptyVersion");
        keys.addKey("InvalidVersion");
        this.add(new PhpcsSniff("PEAR.Commenting.ClassComment", "analyse class comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("WrongStyle");
        keys.addKey("Missing");
        keys.addKey("Missing");
        keys.addKey("Empty");
        keys.addKey("SpacingBefore");
        keys.addKey("DescriptionSpacing");
        keys.addKey("SpacingBeforeTags");
        keys.addKey("MissingVersion");
        keys.addKey("MissingTag");
        keys.addKey("DuplicateTag");
        keys.addKey("TagsNotGrouped");
        keys.addKey("WrongTagOrder");
        keys.addKey("TagIndent");
        keys.addKey("InvalidCategory");
        keys.addKey("EmptyCategory");
        keys.addKey("InvalidPackage");
        keys.addKey("EmptyPackage");
        keys.addKey("InvalidSubpackage");
        keys.addKey("EmptySubpackage");
        keys.addKey("InvalidAuthors");
        keys.addKey("EmptyAuthors");
        keys.addKey("CopyrightHyphen");
        keys.addKey("InvalidCopyright");
        keys.addKey("EmptyCopyright");
        keys.addKey("EmptyCopyright");
        keys.addKey("EmptyLicense");
        keys.addKey("EmptyVersion");
        keys.addKey("InvalidVersion");
        this.add(new PhpcsSniff("PEAR.Commenting.FileComment", "analyse file comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("WrongStyle");
        keys.addKey("Missing");
        keys.addKey("Missing");
        keys.addKey("Missing");
        keys.addKey("Empty");
        keys.addKey("SpacingBeforeShort");
        keys.addKey("SpacingAfterShort");
        keys.addKey("SpacingBeforeTags");
        keys.addKey("EmptyThrows");
        keys.addKey("MissingReturn");
        keys.addKey("EmptyReturn");
        keys.addKey("SpacingAfterParams");
        keys.addKey("SpacingBeforeParams");
        keys.addKey("SpacingBeforeParamType");
        keys.addKey("ParameterNamesNotAligned");
        keys.addKey("ParameterCommentsNotAligned");
        keys.addKey("ParamNameNoCaseMatch");
        keys.addKey("ExtraParamComment");
        keys.addKey("MissingParamName");
        keys.addKey("MissingParamType");
        keys.addKey("MissingParamComment");
        keys.addKey("SpacingAfterLongType");
        keys.addKey("SpacingAfterLongName");
        keys.addKey("MissingParamTag");
        this.add(new PhpcsSniff("PEAR.Commenting.FunctionComment", "analyse function comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("WrongStyle");
        this.add(new PhpcsSniff("PEAR.Commenting.InlineComment", "analyse inline comments", "comment", keys));
//      --------------------------------------
        this.add(new PhpcsSniff("PEAR.ControlStructures.ControlSignature", null, null, null));
        keys = new PhpcsKeys();
        keys.addKey("CloseBracketNewLine");
        keys.addKey("Alignment");
        keys.addKey("StartWithBoolean");
        keys.addKey("NewlineBeforeOpenBrace");
        keys.addKey("NoSpaceBeforeOpenBrace");
        this.add(new PhpcsSniff("PEAR.ControlStructures.MultiLineCondition", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("BracketsNotRequired");
        keys.addKey("UseIncludeOnce");
        keys.addKey("UseInclude");
        keys.addKey("UseRequireOnce");
        keys.addKey("UseRequire");
        this.add(new PhpcsSniff("PEAR.Files.IncludingFile", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("EqualSignLine");
        keys.addKey("Indent");
        this.add(new PhpcsSniff("PEAR.Formatting.MultiLineAssignment", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("SpaceBeforeOpenBracket");
        keys.addKey("SpaceAfterCloseBracket");
        keys.addKey("SpaceAfterOpenBracket");
        keys.addKey("SpaceBeforeCloseBracket");
        keys.addKey("EmptyLine");
        keys.addKey("Indent");
        keys.addKey("MultipleArguments");
        keys.addKey("ContentAfterOpenBracket");
        keys.addKey("CloseBracketLine");
        this.add(new PhpcsSniff("PEAR.Functions.FunctionCallSignature", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("SpaceAfterFunction");
        keys.addKey("SpaceAfterUse");
        keys.addKey("SpaceBeforeUse");
        keys.addKey("CloseBracketLine");
        keys.addKey("CloseBracketLine");
        keys.addKey("Indent");
        keys.addKey("NewlineBeforeOpenBrace");
        keys.addKey("NoSpaceBeforeOpenBrace");
        this.add(new PhpcsSniff("PEAR.Functions.FunctionDeclaration", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotAtEnd");
        this.add(new PhpcsSniff("PEAR.Functions.ValidDefaultValue", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("StartWithCaptial");
        keys.addKey("Invalid");
        keys.addKey("Invalid");
        this.add(new PhpcsSniff("PEAR.NamingConventions.ValidClassName", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("MethodDoubleUnderscore");
        keys.addKey("PrivateNoUnderscore");
        keys.addKey("PublicUnderscore");
        keys.addKey("ScopeNotCamelCaps");
        keys.addKey("NotCamelCaps");
        keys.addKey("FunctionDoubleUnderscore");
        keys.addKey("FunctionUnderscore");
        keys.addKey("FunctionNoCaptial");
        keys.addKey("FunctionInvalid");
        keys.addKey("FunctionNameInvalid");
        this.add(new PhpcsSniff("PEAR.NamingConventions.ValidFunctionName", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("PrivateNoUnderscore");
        keys.addKey("PublicUnderscore");
        this.add(new PhpcsSniff("PEAR.NamingConventions.ValidVariableName", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Incorrect");
        keys.addKey("StartOfLine");
        this.add(new PhpcsSniff("PEAR.WhiteSpace.ObjectOperatorIndent", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Line");
        keys.addKey("BreakIdent");
        keys.addKey("Indent");
        this.add(new PhpcsSniff("PEAR.WhiteSpace.ScopeClosingBrace", null, null, keys));
        this.add(new PhpcsSniff("PEAR.WhiteSpace.ScopeIndent", null, null, null));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("SpaceBeforeBracket");
        keys.addKey("SpaceAfterBracket");
        this.add(new PhpcsSniff("Squiz.Arrays.ArrayBracketSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotLowerCase");
        keys.addKey("SpaceAfterKeyword");
        keys.addKey("SpaceInEmptyArray");
        keys.addKey("NoSpaceBeforeDoubleArrow");
        keys.addKey("SpaceBeforeDoubleArrow");
        keys.addKey("NoSpaceAfterDoubleArrow");
        keys.addKey("SpaceAfterDoubleArrow");
        keys.addKey("SingleLineNotAllowed");
        keys.addKey("NoSpaceAfterComma");
        keys.addKey("SpaceAfterComma");
        keys.addKey("SpaceBeforeComma");
        keys.addKey("CloseBraceNewLine");
        keys.addKey("CloseBraceNotAligned");
        keys.addKey("NoKeySpecified");
        keys.addKey("SpaceBeforeComma");
        keys.addKey("KeySpecified");
        keys.addKey("MulitLineNotAllowed");
        keys.addKey("NoCommaAfterLast");
        keys.addKey("ValueNotAligned");
        keys.addKey("FirstValueNoNewline");
        keys.addKey("FirstIndexNoNewline");
        keys.addKey("KeyNotAligned");
        keys.addKey("DoubleArrowNotAligned");
        keys.addKey("ValueNotAligned");
        keys.addKey("NoComma");
        keys.addKey("SpaceBeforeComma");
        this.add(new PhpcsSniff("Squiz.Arrays.ArrayDeclaration", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("SpacingAfterClose");
        keys.addKey("SpacingBeforeClose");
        this.add(new PhpcsSniff("Squiz.CSS.ClassDefinitionClosingBraceSpace", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("BlankLinesFound");
        this.add(new PhpcsSniff("Squiz.CSS.ClassDefinitionNameSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NoneBefore");
        keys.addKey("Before");
        keys.addKey("AfterNesting");
        keys.addKey("After");
        this.add(new PhpcsSniff("Squiz.CSS.ClassDefinitionOpeningBraceSpace", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Before");
        keys.addKey("NoneAfter");
        keys.addKey("After");
        keys.addKey("AfterNewline");
        this.add(new PhpcsSniff("Squiz.CSS.ColonSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotUpper");
        keys.addKey("Shorthand");
        this.add(new PhpcsSniff("Squiz.CSS.ColourDefinition", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.CSS.DisallowMultipleStyleDefinitions", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.CSS.DuplicateClassDefinition", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.CSS.DuplicateStyleDefinition", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.CSS.EmptyClassDefinition", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.CSS.EmptyStyleDefinition", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("BlankLine");
        keys.addKey("Incorrect");
        this.add(new PhpcsSniff("Squiz.CSS.Indentation", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("FoundUpper");
        this.add(new PhpcsSniff("Squiz.CSS.LowercaseStyleDefinition", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.CSS.MissingColon", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Invalid");
        keys.addKey("SpacingAfterPoint");
        keys.addKey("PointNotRequired");
        keys.addKey("StartWithPoint");
        keys.addKey("Invalid");
        this.add(new PhpcsSniff("Squiz.CSS.Opacity", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotAtEnd");
        keys.addKey("SpaceFound");
        this.add(new PhpcsSniff("Squiz.CSS.SemicolonSpacing", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("MultipleClasses");
        keys.addKey("SpaceBeforeKeyword");
        keys.addKey("NewLineBeforeCloseBrace");
        keys.addKey("SpaceBeforeCloseBrace");
        keys.addKey("EndFileAfterCloseBrace");
        keys.addKey("NoNewlineAfterCloseBrace");
        keys.addKey("NewlinesAfterCloseBrace");
        keys.addKey("CloseBraceSameLine");
        this.add(new PhpcsSniff("Squiz.Classes.ClassDeclaration", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NoMatch");
        this.add(new PhpcsSniff("Squiz.Classes.ClassFileName", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.Classes.DuplicateProperty", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("FoundUppercase");
        this.add(new PhpcsSniff("Squiz.Classes.LowercaseClassKeywords", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("IncorrectCase");
        keys.addKey("NotUsed");
        keys.addKey("SpaceBefore");
        keys.addKey("SpaceAfter");
        this.add(new PhpcsSniff("Squiz.Classes.SelfMemberReference", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("MissingBrace");
        keys.addKey("NotCamelCaps");
        this.add(new PhpcsSniff("Squiz.Classes.ValidClassName", null, null, keys));
//      --------------------------------------
        this.add(new PhpcsSniff("Squiz.CodeAnalysis.EmptyStatement", null, null, null));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("SingleLine");
        keys.addKey("Empty");
        keys.addKey("NoNewLine");
        keys.addKey("HasEmptyLine");
        keys.addKey("FirstLineIndent");
        keys.addKey("NoCaptial");
        keys.addKey("LineIndent");
        keys.addKey("LastLineIndent");
        keys.addKey("HasEmptyLineBefore");
        keys.addKey("NoEmptyLineBefore");
        keys.addKey("NoEmptyLineAfter");
        this.add(new PhpcsSniff("Squiz.Commenting.BlockComment", "analyse block comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("WrongStyle");
        keys.addKey("Missing");
        keys.addKey("Missing");
        keys.addKey("SpacingBefore");
        keys.addKey("Empty");
        keys.addKey("SpacingAfterOpen");
        keys.addKey("MissingShort");
        keys.addKey("SpacingBeforeShort");
        keys.addKey("SpacingBetween");
        keys.addKey("LongNotCaptial");
        keys.addKey("SpacingBeforeTags");
        keys.addKey("ShortSingleLine");
        keys.addKey("ShortNotCapital");
        keys.addKey("ShortFullStop");
        keys.addKey("TagNotAllowed");
        keys.addKey("SpacingAfter");
        this.add(new PhpcsSniff("Squiz.Commenting.ClassComment", "analyse class comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("Abstract");
        keys.addKey("MissingBrace");
        keys.addKey("Missing");
        keys.addKey("Incorrect");
        this.add(new PhpcsSniff("Squiz.Commenting.ClosingDeclarationComment", "analyse closing declaration comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("NoSpaceBeforeTag");
        keys.addKey("SpaceBeforeTag");
        keys.addKey("SpaceBeforeAsterisk");
        this.add(new PhpcsSniff("Squiz.Commenting.DocCommentAlignment", "analyse alignment in comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("Missing");
        this.add(new PhpcsSniff("Squiz.Commenting.EmptyCatchComment", "analyse comments in empty catch clause", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("WrongStyle");
        keys.addKey("Missing");
        keys.addKey("Missing");
        keys.addKey("SpacingAfterOpen");
        keys.addKey("SpacingAfterComment");
        keys.addKey("Empty");
        keys.addKey("ContentAfterOpen");
        keys.addKey("SpacingBeforeShort");
        keys.addKey("SpacingBetween");
        keys.addKey("LongNotCaptial");
        keys.addKey("SpacingBeforeTags");
        keys.addKey("MissingShort");
        keys.addKey("ShortSingleLine");
        keys.addKey("ShortNotCapital");
        keys.addKey("ShortFullStop");
        keys.addKey("TagNotAllowed");
        keys.addKey("SpacingAfter");
        keys.addKey("MissingTag");
        keys.addKey("DuplicateTag");
        keys.addKey("TagOrder");
        keys.addKey("TagIndent");
        keys.addKey("MissingPackage");
        keys.addKey("IncorrectPackage");
        keys.addKey("SquizPackage");
        keys.addKey("MissingSubpackage");
        keys.addKey("IncorrectSubpackage");
        keys.addKey("MissingAuthor");
        keys.addKey("IncorrectAuthor");
        keys.addKey("MissingCopyright");
        keys.addKey("IncorrectCopyright");
        keys.addKey("MissingLicense");
        keys.addKey("MissingLinceseURL");
        keys.addKey("IncorrectLicenseURL");
        keys.addKey("MissingLinceseName");
        keys.addKey("IncorrectLicenseName");
        this.add(new PhpcsSniff("Squiz.Commenting.FileComment", "analyse file comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("Missing");
        keys.addKey("WrongStyle");
        keys.addKey("Missing");
        keys.addKey("WrongEnd");
        keys.addKey("Missing");
        keys.addKey("Empty");
        keys.addKey("ContentAfterOpen");
        keys.addKey("MissingShort");
        keys.addKey("SpacingBeforeShort");
        keys.addKey("SpacingBetween");
        keys.addKey("LongNotCapital");
        keys.addKey("SpacingBeforeTags");
        keys.addKey("ShortSingleLine");
        keys.addKey("ShortNotCapital");
        keys.addKey("ShortFullStop");
        keys.addKey("SpacingAfter");
        keys.addKey("SeeOrder");
        keys.addKey("EmptySee");
        keys.addKey("SeeIndent");
        keys.addKey("DuplicateReturn");
        keys.addKey("ReturnOrder");
        keys.addKey("MissingReturnType");
        keys.addKey("InvalidReturn");
        keys.addKey("InvalidReturnVoid");
        keys.addKey("InvalidNoReturn");
        keys.addKey("InvalidReturnNotVoid");
        keys.addKey("ReturnIndent");
        keys.addKey("MissingReturn");
        keys.addKey("ReturnNotRequired");
        keys.addKey("InvalidThrows");
        keys.addKey("EmptyThrows");
        keys.addKey("ThrowsNotCapital");
        keys.addKey("ThrowsNoFullStop");
        keys.addKey("ThrowsOrder");
        keys.addKey("SpacingAfterParams");
        keys.addKey("SpacingBeforeParams");
        keys.addKey("SpacingBeforeParamType");
        keys.addKey("ParameterNamesNotAligned");
        keys.addKey("ParameterCommentsNotAligned");
        keys.addKey("IncorrectParamVarName");
        keys.addKey("TypeHintMissing");
        keys.addKey("IncorrectTypeHint");
        keys.addKey("InvalidTypeHint");
        keys.addKey("ParamNameNoCaseMatch");
        keys.addKey("ExtraParamComment");
        keys.addKey("MissingParamName");
        keys.addKey("MissingParamType");
        keys.addKey("MissingParamComment");
        keys.addKey("ParamCommentNotCapital");
        keys.addKey("ParamCommentFullStop");
        keys.addKey("SpacingAfterLongType");
        keys.addKey("SpacingAfterLongName");
        keys.addKey("MissingParamTag");
        keys.addKey("TagNotAllowed");
        this.add(new PhpcsSniff("Squiz.Commenting.FunctionComment", "analyse function comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("Missing");
        keys.addKey("WrongNumber");
        keys.addKey("WrongType");
        this.add(new PhpcsSniff("Squiz.Commenting.FunctionCommentThrowTag", "force @throws tags at Exception throwing Functions", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("DocBlock");
        keys.addKey("WrongStyle");
        keys.addKey("NoSpaceBefore");
        keys.addKey("SpacingBefore");
        keys.addKey("Empty");
        keys.addKey("NotCapital");
        keys.addKey("InvalidEndChar");
        keys.addKey("SpacingAfter");
        this.add(new PhpcsSniff("Squiz.Commenting.InlineComment", "analyse inline comments", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("Missing");
        keys.addKey("SpacingBefore");
        keys.addKey("Invalid");
        this.add(new PhpcsSniff("Squiz.Commenting.LongConditionClosingComment", "force comments at the end of long conditions", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.Commenting.PostStatementComment", "analyse comments after statements", "comment", keys));
        keys = new PhpcsKeys();
        keys.addKey("WrongStyle");
        keys.addKey("Missing");
        keys.addKey("Missing");
        keys.addKey("Empty");
        keys.addKey("ContentAfterOpen");
        keys.addKey("MissingShort");
        keys.addKey("SpacingBeforeShort");
        keys.addKey("SpacingBetween");
        keys.addKey("LongNotCapital");
        keys.addKey("ShortSingleLine");
        keys.addKey("ShortNotCapital");
        keys.addKey("ShortFullStop");
        keys.addKey("SpacingBeforeTags");
        keys.addKey("TagNotAllowed");
        keys.addKey("SpacingAfter");
        keys.addKey("DuplicateVar");
        keys.addKey("VarOrder");
        keys.addKey("MissingVarType");
        keys.addKey("IncorrectVarType");
        keys.addKey("VarIndent");
        keys.addKey("MissingVar");
        keys.addKey("EmptySees");
        keys.addKey("SeesIndent");
        this.add(new PhpcsSniff("Squiz.Commenting.VariableComment", "analyse variable comments", "comment", keys));
//      --------------------------------------
        this.add(new PhpcsSniff("Squiz.ControlStructures.ControlSignature", null, null, null));
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        this.add(new PhpcsSniff("Squiz.ControlStructures.ElseIfDeclaration", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("SpaceAfterOpen");
        keys.addKey("SpaceBeforeClose");
        keys.addKey("AsNotLower");
        keys.addKey("NoSpaceBeforeArrow");
        keys.addKey("SpacingBeforeArrow");
        keys.addKey("NoSpaceAfterArrow");
        keys.addKey("SpacingAfterArrow");
        keys.addKey("NoSpaceBeforeAs");
        keys.addKey("SpacingBeforeAs");
        keys.addKey("NoSpaceAfterAs");
        keys.addKey("SpacingAfterAs");
        this.add(new PhpcsSniff("Squiz.ControlStructures.ForEachLoopDeclaration", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NoOpenBracket");
        keys.addKey("SpacingAfterOpen");
        keys.addKey("SpacingBeforeClose");
        keys.addKey("SpacingBeforeFirst");
        keys.addKey("NoSpaceAfterFirst");
        keys.addKey("SpacingAfterFirst");
        keys.addKey("SpacingBeforeSecond");
        keys.addKey("NoSpaceAfterSecond");
        keys.addKey("SpacingAfterSecond");
        this.add(new PhpcsSniff("Squiz.ControlStructures.ForLoopDeclaration", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotSingleLine");
        keys.addKey("NoBrackets");
        keys.addKey("SpacingBeforeThen");
        keys.addKey("SpacingAfterThen");
        keys.addKey("SpacingBeforeElse");
        keys.addKey("SpacingAfterElse");
        this.add(new PhpcsSniff("Squiz.ControlStructures.InlineIfDeclaration", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("FoundUppercase");
        this.add(new PhpcsSniff("Squiz.ControlStructures.LowercaseDeclaration", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Case");
        keys.addKey("Case");
        keys.addKey("SpacingAfterCase");
        keys.addKey("SpaceBeforeColon");
        keys.addKey("BreakIndent");
        keys.addKey("SpacingBeforeBreak");
        keys.addKey("SpacingAfterBreak");
        keys.addKey("SpacingAfterDefaultBreak");
        keys.addKey("SpacingAfter");
        keys.addKey("EmptyCase");
        keys.addKey("EmptyDefault");
        keys.addKey("DefaultNoBreak");
        keys.addKey("MissingDefault");
        keys.addKey("CloseBraceAlign");
        keys.addKey("MissingCase");
        this.add(new PhpcsSniff("Squiz.ControlStructures.SwitchDeclaration", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("ExternalTool");
        this.add(new PhpcsSniff("Squiz.Debug.JSLint", null, null, keys));
        this.add(new PhpcsSniff("Squiz.Debug.JavaScriptLint", null, null, null));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("ClassFound");
        keys.addKey("NoClass");
        this.add(new PhpcsSniff("Squiz.Files.FileExtension", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("SpacingAfterMinus");
        keys.addKey("MissingBrackets");
        keys.addKey("MissingBrackets");
        keys.addKey("MissingBrackets");
        keys.addKey("MissingBrackets");
        this.add(new PhpcsSniff("Squiz.Formatting.OperatorBracket", null, null, keys));
//      --------------------------------------
        this.add(new PhpcsSniff("Squiz.Functions.FunctionDeclaration", null, null, null));
        keys = new PhpcsKeys();
        keys.addKey("SpaceBeforeEquals");
        keys.addKey("SpaceAfterDefault");
        keys.addKey("SpaceBeforeComma");
        keys.addKey("SpacingAfterHint");
        keys.addKey("NoSapceBeforeHint");
        keys.addKey("SpacingBeforeHint");
        keys.addKey("SpacingBeforeArg");
        keys.addKey("NoSpaceBeforeArg");
        keys.addKey("SpacingAfterHint");
        keys.addKey("SpacingAfterOpenHint");
        keys.addKey("SpacingAfterOpen");
        keys.addKey("SpacingBetween");
        keys.addKey("SpacingBeforeClose");
        this.add(new PhpcsSniff("Squiz.Functions.FunctionDeclarationArgumentSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.Functions.FunctionDuplicateArgument", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.Functions.GlobalFunction", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("FoundUppercase");
        this.add(new PhpcsSniff("Squiz.Functions.LowercaseFunctionKeywords", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("The first parameter of a multi-line ");
        keys.addKey("Multi-line ");
        keys.addKey("Commas in multi-line ");
        this.add(new PhpcsSniff("Squiz.Functions.MultiLineFunctionDeclaration", null, null, keys));
//      --------------------------------------
        this.add(new PhpcsSniff("Squiz.NamingConventions.ConstantCase", null, null, null));
        keys = new PhpcsKeys();
        keys.addKey("DoubleUnderscore");
        keys.addKey("NotCamelCaps");
        this.add(new PhpcsSniff("Squiz.NamingConventions.ValidFunctionName", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotCamelCaps");
        keys.addKey("NotCamelCaps");
        keys.addKey("PublicHasUnderscore");
        keys.addKey("PrivateNoUnderscore");
        keys.addKey("MemberNotCamelCaps");
        keys.addKey("StringNotCamelCaps");
        this.add(new PhpcsSniff("Squiz.NamingConventions.ValidVariableName", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.Objects.DisallowObjectStringIndex", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotAssigned");
        this.add(new PhpcsSniff("Squiz.Objects.ObjectInstantiation", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Missing");
        this.add(new PhpcsSniff("Squiz.Objects.ObjectMemberComma", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        keys.addKey("ImplicitTrue");
        keys.addKey("ImplicitTrue");
        this.add(new PhpcsSniff("Squiz.Operators.ComparisonOperatorUsage", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        keys.addKey("NoBrackets");
        this.add(new PhpcsSniff("Squiz.Operators.IncrementDecrementUsage", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        this.add(new PhpcsSniff("Squiz.Operators.ValidLogicalOperators", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.PHP.CommentedOutCode", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("AssignedComparison");
        keys.addKey("AssignedBool");
        this.add(new PhpcsSniff("Squiz.PHP.DisallowComparisonAssignment", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.PHP.DisallowInlineIf", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.PHP.DisallowMultipleAssignments", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.PHP.DisallowObEndFlush", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.PHP.DisallowSizeFunctionsInLoops", null, null, keys));
        this.add(new PhpcsSniff("Squiz.PHP.DiscouragedFunctions", "highlight discouraged functions", "forbidden", null));
        keys = new PhpcsKeys();
        keys.addKey("Empty");
        keys.addKey("SpacingBefore");
        keys.addKey("ContentAfterOpen");
        keys.addKey("Indent");
        keys.addKey("SpacingAfter");
        keys.addKey("ContentAfterEnd");
        keys.addKey("Empty");
        keys.addKey("SpacingAfterOpen");
        keys.addKey("NoSemicolon");
        keys.addKey("MultipleStatements");
        keys.addKey("NoSpaceBeforeClose");
        keys.addKey("NoSpaceBeforeClose");
        keys.addKey("SpacingBeforeClose");
        this.add(new PhpcsSniff("Squiz.PHP.EmbeddedPhp", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Discouraged");
        this.add(new PhpcsSniff("Squiz.PHP.Eval", "highlight eval expressions", "forbidden", keys));
        this.add(new PhpcsSniff("Squiz.PHP.ForbiddenFunctions", "highlight forbidden functions", "forbidden", null));
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        this.add(new PhpcsSniff("Squiz.PHP.GlobalKeyword", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        this.add(new PhpcsSniff("Squiz.PHP.Heredoc", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        this.add(new PhpcsSniff("Squiz.PHP.InnerFunctions", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("KeywordUppercase");
        keys.addKey("CallUppercase");
        this.add(new PhpcsSniff("Squiz.PHP.LowercasePHPFunctions", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("ReturnNotRequired");
        keys.addKey("Unreachable");
        keys.addKey("Unreachable");
        this.add(new PhpcsSniff("Squiz.PHP.NonExecutableCode", "show unreachable code", "unreachable", keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Missing");
        this.add(new PhpcsSniff("Squiz.Scope.MemberVarScope", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Missing");
        this.add(new PhpcsSniff("Squiz.Scope.MethodScope", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Found");
        this.add(new PhpcsSniff("Squiz.Scope.StaticThisUsage", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("Missing");
        this.add(new PhpcsSniff("Squiz.Strings.ConcatenationSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("ContainsVar");
        keys.addKey("NotRequired");
        this.add(new PhpcsSniff("Squiz.Strings.DoubleQuoteUsage", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("HasBracket");
        this.add(new PhpcsSniff("Squiz.Strings.EchoedStrings", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("ContainsWhiteSpace");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.CastSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("SpacingAfterOpenBrace");
        keys.addKey("SpaceBeforeCloseBrace");
        keys.addKey("SpacingBeforeOpen");
        keys.addKey("SpacingAfterClose");
        keys.addKey("LineAfterClose");
        keys.addKey("NoLineAfterClose");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.ControlStructureSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("SpacingBetween");
        keys.addKey("ContentBeforeClose");
        keys.addKey("SpacingBeforeNestedClose");
        keys.addKey("SpacingBeforeClose");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.FunctionClosingBraceSpace", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("SpacingAfter");
        keys.addKey("SpacingAfterNested");
        keys.addKey("ContentBefore");
        keys.addKey("SpacingBefore");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.FunctionOpeningBraceSpace", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("After");
        keys.addKey("Before");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.FunctionSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("IncorrectSingle");
        keys.addKey("Incorrect");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.LanguageConstructSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NoSpaceBefore");
        keys.addKey("TooMuchSpaceBefore");
        keys.addKey("NoSpaceAfter");
        keys.addKey("TooMuchSpaceAfter");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.LogicalOperatorSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("After");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.MemberVarSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Before");
        keys.addKey("After");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.ObjectOperatorSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("NoSpaceBeforeAmp");
        keys.addKey("SpacingBeforeAmp");
        keys.addKey("NoSpaceAfterAmp");
        keys.addKey("SpacingAfterAmp");
        keys.addKey("NoSpaceBefore");
        keys.addKey("SpacingBefore");
        keys.addKey("NoSpaceAfter");
        keys.addKey("SpacingAfter");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.OperatorSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Before");
        keys.addKey("After");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.PropertyLabelSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("ContentBefore");
        keys.addKey("Indent");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.ScopeClosingBrace", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Incorrect");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.ScopeKeywordSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("Incorrect");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.SemicolonSpacing", null, null, keys));
        keys = new PhpcsKeys();
        keys.addKey("StartFile");
        keys.addKey("EndFile");
        keys.addKey("EndLine");
        keys.addKey("EmptyLines");
        this.add(new PhpcsSniff("Squiz.WhiteSpace.SuperfluousWhitespace", null, null, keys));
//      --------------------------------------
        this.add(new PhpcsSniff("Zend.Debug.CodeAnalyzer", null, null, null));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("NotAllowed");
        this.add(new PhpcsSniff("Zend.Files.ClosingTag", null, null, keys));
//      --------------------------------------
        keys = new PhpcsKeys();
        keys.addKey("NotCamelCaps");
        keys.addKey("ContainsNumbers");
        keys.addKey("NotCamelCaps");
        keys.addKey("ContainsNumbers");
        keys.addKey("PublicHasUnderscore");
        keys.addKey("PrivateNoUnderscore");
        keys.addKey("MemberVarNotCamelCaps");
        keys.addKey("MemberVarContainsNumbers");
        keys.addKey("StringVarNotCamelCaps");
        keys.addKey("StringVarContainsNumbers");
        this.add(new PhpcsSniff("Zend.NamingConventions.ValidVariableName", null, null, keys));
//      --------------------------------------
}}