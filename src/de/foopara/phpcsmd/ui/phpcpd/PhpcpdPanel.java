package de.foopara.phpcsmd.ui.phpcpd;

import de.foopara.phpcsmd.generics.GenericOptionsPanel;
import de.foopara.phpcsmd.option.PhpcpdOptions;

public class PhpcpdPanel extends GenericOptionsPanel
{

    /**
     * Creates new form PhpcpdPanel
     */
    public PhpcpdPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        optActiveSingle = new javax.swing.JCheckBox();
        optActiveFolder = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        optScript = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        optMinLines = new javax.swing.JSpinner();
        optMinTokens = new javax.swing.JSpinner();
        optSuffix = new javax.swing.JTextField();
        optExlude = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        optActiveSingle.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.optActiveSingle.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optActiveSingle, gridBagConstraints);

        optActiveFolder.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.optActiveFolder.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optActiveFolder, gridBagConstraints);

        jLabel1.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(jLabel1, gridBagConstraints);

        optScript.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.optScript.text")); // NOI18N
        optScript.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                optScriptKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optScript, gridBagConstraints);

        jLabel2.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.jLabel3.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(jLabel3, gridBagConstraints);

        jLabel4.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.jLabel4.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(jLabel4, gridBagConstraints);

        jLabel5.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.jLabel5.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(jLabel5, gridBagConstraints);

        optMinLines.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(5), Integer.valueOf(1), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optMinLines, gridBagConstraints);

        optMinTokens.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(70), Integer.valueOf(1), null, Integer.valueOf(1)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optMinTokens, gridBagConstraints);

        optSuffix.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.optSuffix.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optSuffix, gridBagConstraints);

        optExlude.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.optExlude.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optExlude, gridBagConstraints);

        jButton1.setText(org.openide.util.NbBundle.getMessage(PhpcpdPanel.class, "PhpcpdPanel.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(jButton1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void optScriptKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_optScriptKeyReleased
        this.hasValidValues();
    }//GEN-LAST:event_optScriptKeyReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.chooseScriptFile(this.optScript);
    }//GEN-LAST:event_jButton1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JCheckBox optActiveFolder;
    private javax.swing.JCheckBox optActiveSingle;
    private javax.swing.JTextField optExlude;
    private javax.swing.JSpinner optMinLines;
    private javax.swing.JSpinner optMinTokens;
    private javax.swing.JTextField optScript;
    private javax.swing.JTextField optSuffix;
    // End of variables declaration//GEN-END:variables

    @Override
    public void load() {
        this.optActiveSingle.setSelected((Boolean)PhpcpdOptions.loadOriginal(PhpcpdOptions.Settings.ACTIVATED));
        this.optActiveFolder.setSelected((Boolean)PhpcpdOptions.loadOriginal(PhpcpdOptions.Settings.ACTIVATEDFOLDER));
        this.optScript.setText((String)PhpcpdOptions.loadOriginal(PhpcpdOptions.Settings.SCRIPT));
        this.optMinLines.setValue((Integer)PhpcpdOptions.loadOriginal(PhpcpdOptions.Settings.MINLINES));
        this.optMinTokens.setValue((Integer)PhpcpdOptions.loadOriginal(PhpcpdOptions.Settings.MINTOKENS));
        this.optSuffix.setText((String)PhpcpdOptions.loadOriginal(PhpcpdOptions.Settings.SUFFIXES));
        this.optExlude.setText((String)PhpcpdOptions.loadOriginal(PhpcpdOptions.Settings.EXCLUDE));
        this.hasValidValues();
    }

    @Override
    public void save() {
        PhpcpdOptions.set(PhpcpdOptions.Settings.ACTIVATED, this.optActiveSingle.isSelected());
        PhpcpdOptions.set(PhpcpdOptions.Settings.ACTIVATEDFOLDER, this.optActiveFolder.isSelected());
        PhpcpdOptions.set(PhpcpdOptions.Settings.SCRIPT, this.optScript.getText());
        PhpcpdOptions.set(PhpcpdOptions.Settings.MINLINES, (Integer)this.optMinLines.getValue());
        PhpcpdOptions.set(PhpcpdOptions.Settings.MINTOKENS, (Integer)this.optMinTokens.getValue());
        PhpcpdOptions.set(PhpcpdOptions.Settings.SUFFIXES, this.optSuffix.getText());
        PhpcpdOptions.set(PhpcpdOptions.Settings.EXCLUDE, this.optExlude.getText());
    }

    @Override
    public boolean hasValidValues() {
        boolean ret = true;
        ret = ret & (!(this.optActiveSingle.isSelected() || this.optActiveFolder.isSelected())
                     || this.textfieldContainsExistingFile(this.optScript));
        return ret;
    }

}
