/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.foopara.phpcsmd.ui.reports;

import de.foopara.phpcsmd.threads.FileCountThread;
import de.foopara.phpcsmd.threads.RescanThread;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.filesystems.FileObject;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.foopara.phpcsmd.ui.reports//ScanReport//EN",
autostore = false)
@TopComponent.Description(preferredID = "ScanReportTopComponent",
iconBase = "de/foopara/phpcsmd/resources/icon.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "de.foopara.phpcsmd.ui.reports.ScanReportTopComponent")
@ActionReference(path = "Menu/Window" /*
 * , position = 333
 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_ScanReportAction",
preferredID = "ScanReportTopComponent")
@Messages({
    "CTL_ScanReportAction=ScanReport",
    "CTL_ScanReportTopComponent=ScanReport",
    "HINT_ScanReportTopComponent=This is a ScanReport window"
})
public final class ScanReportTopComponent extends TopComponent {

    private FileObject fileObject;

    public ScanReportTopComponent() {
        initComponents();
        setName(Bundle.CTL_ScanReportTopComponent());
        setToolTipText(Bundle.HINT_ScanReportTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        scanReportTable1 = new de.foopara.phpcsmd.ui.reports.ScanReportTable();
        optFullRescan = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ScanReportTopComponent.class, "ScanReportTopComponent.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(jLabel1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ScanReportTopComponent.class, "ScanReportTopComponent.jLabel2.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(jLabel2, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(ScanReportTopComponent.class, "ScanReportTopComponent.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(jButton1, gridBagConstraints);

        jProgressBar1.setMaximum(1);
        jProgressBar1.setFocusable(false);
        jProgressBar1.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(jProgressBar1, gridBagConstraints);

        jScrollPane1.setViewportView(scanReportTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        add(jScrollPane1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(optFullRescan, org.openide.util.NbBundle.getMessage(ScanReportTopComponent.class, "ScanReportTopComponent.optFullRescan.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        add(optFullRescan, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.jProgressBar1.setValue(0);
        this.jProgressBar1.setMaximum(1);

        FileCountThread t1 = new FileCountThread();
        t1.setFileObject(this.fileObject);
        t1.setTopComponent(this);

        RescanThread t2 = new RescanThread();
        t2.setFileObject(this.fileObject);
        t2.setTopComponent(this);
        t2.setRetrieveValuesFromRegistry(!this.optFullRescan.isSelected());

        this.jButton1.setEnabled(false);
        this.optFullRescan.setEnabled(false);
        this.jProgressBar1.setVisible(true);
        this.scanReportTable1.flushElements();

        t1.start();
        t2.start();
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox optFullRescan;
    private de.foopara.phpcsmd.ui.reports.ScanReportTable scanReportTable1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        this.toFront();
        this.setRescanDone();
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void setRescanDone() {
        this.jButton1.setEnabled(true);
        this.optFullRescan.setEnabled(true);
        this.jProgressBar1.setVisible(false);
    }

    public void setFileObject(FileObject fo) {
        this.fileObject = fo;
        this.jLabel2.setText(this.fileObject.getPath());
        this.scanReportTable1.setRootDirectory(fo);
    }

    public void setMaximumFilecount(int fc) {
        this.jProgressBar1.setMaximum(fc);
        this.jProgressBar1.setString(this.jProgressBar1.getValue() + "/" + this.jProgressBar1.getMaximum());
    }

    public void setScannedFilecount(int fc) {
        fc = Math.min(fc, this.jProgressBar1.getMaximum());
        this.jProgressBar1.setValue(fc);
        this.jProgressBar1.setString(this.jProgressBar1.getValue() + "/" + this.jProgressBar1.getMaximum());
    }

    public void addElementToTable(FileObject fo) {
        this.scanReportTable1.addElement(fo);
    }
}
