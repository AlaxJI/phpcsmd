/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.foopara.phpcsmd.ui.phpmd;

import de.foopara.phpcsmd.generics.GenericOptionsPanel;
import de.foopara.phpcsmd.option.PhpmdOptions;
import org.openide.util.Lookup;

public class PhpmdPropertyPanel extends GenericOptionsPanel
{

    protected Lookup lkp = null;

    public PhpmdPropertyPanel() {
        this(null);
    }

    /**
     * Creates new form PhpmdPropertyPanel
     */
    public PhpmdPropertyPanel(Lookup lkp) {
        super();
        this.lkp = lkp;
        initComponents();
        this.load();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        optRules = new javax.swing.JTextField();
        owRules = new javax.swing.JCheckBox();
        owSuffix = new javax.swing.JCheckBox();
        optSuffix = new javax.swing.JTextField();
        owExclude = new javax.swing.JCheckBox();
        optExclude = new javax.swing.JTextField();
        owMinPrio = new javax.swing.JCheckBox();
        optMinPrio = new javax.swing.JTextField();
        owStrict = new javax.swing.JCheckBox();
        optStrict = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.jLabel1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 2, 2);
        add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 2, 2);
        add(jSeparator1, gridBagConstraints);

        optRules.setText(org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.jCheckBox1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optRules, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(owRules, org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.owRules.text")); // NOI18N
        owRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                owActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(owRules, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(owSuffix, org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.owSuffix.text")); // NOI18N
        owSuffix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                owActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(owSuffix, gridBagConstraints);

        optSuffix.setText(org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.optSuffix.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optSuffix, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(owExclude, org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.owExclude.text")); // NOI18N
        owExclude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                owActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(owExclude, gridBagConstraints);

        optExclude.setText(org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.optExclude.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optExclude, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(owMinPrio, org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.owMinPrio.text")); // NOI18N
        owMinPrio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                owActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(owMinPrio, gridBagConstraints);

        optMinPrio.setText(org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.optMinPrio.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optMinPrio, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(owStrict, org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.owStrict.text")); // NOI18N
        owStrict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                owActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(owStrict, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(optStrict, org.openide.util.NbBundle.getMessage(PhpmdPropertyPanel.class, "PhpmdPropertyPanel.optStrict.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 2, 2);
        add(optStrict, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void owActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_owActionPerformed
        this.updateForm();
    }//GEN-LAST:event_owActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField optExclude;
    private javax.swing.JTextField optMinPrio;
    private javax.swing.JTextField optRules;
    private javax.swing.JCheckBox optStrict;
    private javax.swing.JTextField optSuffix;
    private javax.swing.JCheckBox owExclude;
    private javax.swing.JCheckBox owMinPrio;
    private javax.swing.JCheckBox owRules;
    private javax.swing.JCheckBox owStrict;
    private javax.swing.JCheckBox owSuffix;
    // End of variables declaration//GEN-END:variables

    @Override
    public void load() {
        owRules.setSelected(PhpmdOptions.isOverwritten(PhpmdOptions.Settings.RULES, this.lkp));
        optRules.setText((String)PhpmdOptions.load(PhpmdOptions.Settings.RULES, this.lkp));
        owSuffix.setSelected(PhpmdOptions.isOverwritten(PhpmdOptions.Settings.SUFFIXES, this.lkp));
        optSuffix.setText((String)PhpmdOptions.load(PhpmdOptions.Settings.SUFFIXES, this.lkp));
        owExclude.setSelected(PhpmdOptions.isOverwritten(PhpmdOptions.Settings.EXCLUDE, this.lkp));
        optExclude.setText((String)PhpmdOptions.load(PhpmdOptions.Settings.EXCLUDE, this.lkp));
        owMinPrio.setSelected(PhpmdOptions.isOverwritten(PhpmdOptions.Settings.MINPRIORITY, this.lkp));
        optMinPrio.setText((String)PhpmdOptions.load(PhpmdOptions.Settings.MINPRIORITY, this.lkp));
        owStrict.setSelected(PhpmdOptions.isOverwritten(PhpmdOptions.Settings.STRICT, this.lkp));
        optStrict.setSelected((Boolean)PhpmdOptions.load(PhpmdOptions.Settings.STRICT, this.lkp));
        this.updateForm();
    }

    @Override
    public void save() {
        PhpmdOptions.overwrite(PhpmdOptions.Settings.RULES, owRules.isSelected() ? optRules.getText() : null, this.lkp);
        PhpmdOptions.overwrite(PhpmdOptions.Settings.SUFFIXES, owSuffix.isSelected() ? optSuffix.getText() : null, this.lkp);
        PhpmdOptions.overwrite(PhpmdOptions.Settings.EXCLUDE, owExclude.isSelected() ? optExclude.getText() : null, this.lkp);
        PhpmdOptions.overwrite(PhpmdOptions.Settings.MINPRIORITY, owMinPrio.isSelected() ? optMinPrio.getText() : null, this.lkp);
        PhpmdOptions.overwrite(PhpmdOptions.Settings.STRICT, owStrict.isSelected() ? optStrict.isSelected() : null, this.lkp);
    }

    public void updateForm() {
        optRules.setEnabled(owRules.isSelected());
        optSuffix.setEnabled(owSuffix.isSelected());
        optExclude.setEnabled(owExclude.isSelected());
        optMinPrio.setEnabled(owMinPrio.isSelected());
        optStrict.setEnabled(owStrict.isSelected());
    }

    @Override
    public boolean hasValidValues() {
        return true;
    }

}
